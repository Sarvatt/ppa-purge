#!/bin/bash
# A script to remove all packages in a PPA and revert back to the normal
# distribution ones.
#
# Robert Hooker (Sarvatt) 
# History:
# v0.1   - 07-28-2009: Initial Revision.
# v0.2   - 07-29-2009: Add warnings, don't remove this package if it exists in the PPA.
# v0.2.2 - 08-05-2009: Fix command option parsing errors.
# v0.2.3 - 08-06-2009: Removed -v option, script will always be verbose. Also minor fixups.
#
# Questions? contact sarvatt@gmail.com

# Defaults
DIST=${DIST:-$(lsb_release -c -s)}
ARCH=$(dpkg --print-architecture)
SOURCES=${SOURCES:-/etc/apt/sources.list}
PPAOWNER=${PPAOWNER:-}
PPANAME=${PPANAME:-ppa}
PPA_PKGS=$(mktemp)
REVERTS=$(mktemp)
trap "rm $PPA_PKGS $REVERTS" 0
APTLINE=""
PACKAGELIST=""
i=1

# Functions to write output nicely.
write_msg() {
    echo "$*" | fold -s -w "${COLUMNS:-80}"
}

msg() {
	write_msg "$*"
}

warn() {
	write_msg "Warning:  $*" 1>&2
}

usage() {
	echo "Usage: sudo ppa-purge <ppa-name> [options]"
	echo
	echo "This script will reset all packages from a PPA of your choice to the standard ones"
	echo "released for your distribution. It must be run with superuser privileges."
	echo
	echo "Example usage commands:"
	echo "	sudo ppa-purge xorg-edgers"
	echo "		Will remove https://launchpad.net/~xorg-edgers/+archive/ppa"
	echo
	echo "	sudo ppa-purge sarvatt -p xorg-testing"
	echo "		Will remove https://launchpad.net/~sarvatt/+archive/xorg-testing"
	echo
	echo "	sudo ppa-purge sarvatt -p xorg-testing -t /opt"
	echo "		Will remove https://launchpad.net/~sarvatt/+archive/xorg-testing, store log"
	echo "		log files in /opt/"
	echo
	echo "Options:"
	echo "	-p [ppa]  	Name of the PPA to be reset (lowercase)	 	    	default: ppa"
	exit $1
}

PPAOWNER=$1 && shift

# Command line options
while getopts "p:h\?" opt; do
	case "$opt" in
		p ) PPANAME="$OPTARG"				;;
		h ) usage 0;					;;
		\?) usage 1;					;;
		* ) warn "Unknown option '$opt'"; usage 1;	;;
	esac
done
shift $(($OPTIND -1))

if [ -z "$PPAOWNER" ]; then
	warn "Required ppa-name argument was not specified"
	usage 1
fi

if [ "$(id -u)" != "0" ]; then
	warn "This script must be run with superuser privileges."
	usage 1
fi

echo;msg "Architecture:						$ARCH"
msg "Distribution:						$DIST"
msg "PPA to be removed: 					$PPAOWNER $PPANAME";echo;echo

# Make list of all packages in PPA
cat /var/lib/apt/lists/ppa.launchpad.net_${PPAOWNER}_${PPANAME}_ubuntu_dists_${DIST}_main_binary-${ARCH}_Packages | \
grep "Package: " | cut -d " " -f2 | sort -n - > ${PPA_PKGS};

echo;msg "File $PPA_PKGS containing a list of all packages in the ${PPAOWNER}-${PPANAME} PPA created."

# Don't remove ppa-purge (this package) if it exists in the PPA package list.
if [ -n `grep "ppa-purge" ${PPA_PKGS}` ]; then
        sed -i '/ppa-purge/d' ${PPA_PKGS}
	msg "ppa-purge detected in the PPA, not removing."
fi


dpkg -l | cut -d' ' -f3 | sort -n - | comm -12 - $PPA_PKGS > $REVERTS
echo;msg "File $REVERTS created."

# Store number of packages in the PPA list for later use
x=`wc -l $REVERTS | cut -d" " -f1`

# Create apt-get invocation args from package lists in the logs.
while [ $i -le $x ]
do
	APTLINE=${APTLINE}" `head -$i $REVERTS | tail -1`/"$DIST
	i=`expr $i + 1`
done

echo;msg "Number of packages installed from the $PPANAME PPA:		${x}"
echo;msg "Package removal list generated."
echo;msg "Packages:  $APTLINE";echo

# Check if the PPA is in /etc/apt/sources.list, or a seperate file in
# /etc/apt/sources.list.d/ and store SOURCES accordingly.

if [ -z "$(grep $PPAOWNER /etc/apt/sources.list)" ]
then
	SOURCES=$(grep -R -l "${PPAOWNER}/${PPANAME}" /etc/apt/sources.list.d/)
	echo;msg "$PPAOWNER apt sources found at non-standard location $SOURCES"
else
	echo;msg "$PPAOWNER apt sources found in standard location (/etc/apt/sources.list)"
fi

echo;echo -n "Press enter to complete the purge..."
read nothing

sed -i "\:^[^#]+/${PPAOWNER}/${PPANAME}/:s/^deb/# deb/" ${SOURCES}
echo;msg "$PPAOWNER PPA removed from sources."

apt-get update >/dev/null || warn "Apt-get update failed for some reason. Giving up."

# FIXME:
# Workaround for now incase apt-get fails because of a package not in ubuntu. Aptitude actually works
# but it would be preferred to remove the package from $APTLINE directly.

if apt-get install ${APTLINE} ; then
	echo;msg "PPA Purged!"
elif aptitude install ${APTLINE} ; then
	echo;msg "Package not included in Ubuntu detected, falling back to aptitude to work around it.";echo
else
	warn "Something went wrong. Giving up.";exit 1
fi

exit 0
