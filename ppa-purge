#!/bin/bash
# A script to remove all packages in a PPA and revert back to the normal
# distribution ones.
#
# Robert Hooker (Sarvatt) 
# History:
# v0.1   - 07-28-2009: Initial Revision.
# v0.2   - 07-29-2009: Add warnings, don't remove this package if it exists in the PPA.
# v0.2.2 - 08-05-2009: Fix command option parsing errors.
# v0.2.3 - 08-06-2009: Removed -v option, script will always be verbose. Also minor fixups.
#
# Questions? contact sarvatt@gmail.com

# Defaults
DIST=$(lsb_release -c -s)
ARCH=$(dpkg --print-architecture)
PPANAME=${PPANAME:-ppa}
PPA_PKGS=$(mktemp)
REVERTS=$(mktemp)
trap "rm $PPA_PKGS $REVERTS" 0

# Functions to write output nicely.
write_msg() {
    echo "$*" | fold -s -w "${COLUMNS:-80}"
}

msg() {
	write_msg "$*"
}

warn() {
	write_msg "Warning:  $*" 1>&2
}

usage() {
	echo "Usage: sudo ppa-purge <ppa-name> [options]"
	echo
	echo "This script will reset all packages from a PPA of your choice to the standard ones"
	echo "released for your distribution. It must be run with superuser privileges."
	echo
	echo "Example usage commands:"
	echo "	sudo ppa-purge xorg-edgers"
	echo "		Will remove https://launchpad.net/~xorg-edgers/+archive/ppa"
	echo
	echo "	sudo ppa-purge sarvatt -p xorg-testing"
	echo "		Will remove https://launchpad.net/~sarvatt/+archive/xorg-testing"
	echo
	echo "	sudo ppa-purge sarvatt -p xorg-testing -t /opt"
	echo "		Will remove https://launchpad.net/~sarvatt/+archive/xorg-testing, store log"
	echo "		log files in /opt/"
	echo
	echo "Options:"
	echo "	-p [ppa]  	Name of the PPA to be reset (lowercase)	 	    	default: ppa"
	exit $1
}

PPAOWNER=$1 && shift

# Command line options
while getopts "p:h\?" opt; do
	case "$opt" in
		p ) PPANAME="$OPTARG"				;;
		h ) usage 0;					;;
		\?) usage 1;					;;
		* ) warn "Unknown option '$opt'"; usage 1;	;;
	esac
done
shift $(($OPTIND -1))

if [ -z "$PPAOWNER" ]; then
	warn "Required ppa-name argument was not specified"
	usage 1
fi

if [ "$(id -u)" != "0" ]; then
	warn "This script must be run with superuser privileges."
	usage 1
fi

echo;msg "Architecture:						$ARCH"
msg "Distribution:						$DIST"
msg "PPA to be removed: 					$PPAOWNER $PPANAME";echo;echo

# Make list of all packages in PPA
PPA_LIST=/var/lib/apt/lists/ppa.launchpad.net_${PPAOWNER}_${PPANAME}_*_Packages
grep "Package: " $PPA_LIST | cut -d " " -f2 | sort > $PPA_PKGS

echo;msg "File $PPA_PKGS containing a list of all packages in the ${PPAOWNER}-${PPANAME} PPA created."

# Don't remove ppa-purge (this package) if it exists in the PPA package list.
if grep -q "ppa-purge" $PPA_PKGS ; then
        sed -i '/ppa-purge/d' $PPA_PKGS
	msg "ppa-purge detected in the PPA, not removing."
fi

dpkg --get-selections | awk '/install$/{print $1}' |
     sort | comm -12 - $PPA_PKGS > $REVERTS
echo;msg "File $REVERTS created."

# Create apt-get argument list for reverting packages
REINSTALL=""
for PACKAGE in $(cat $REVERT); do
	REINSTALL="$REINSTALL $PACKAGE/$DIST"
done

echo;msg "Package removal list generated."
echo;msg "Packages:  $REINSTALL";echo

# Disable PPA from sources.list files
for LIST in /etc/apt/sources.list /etc/apt/sources.list.d/*.list; do
	if [ -e $LIST ] && grep -q $PPAOWNER/$PPANAME $LIST; then
		sudo sed -i "\:^[^#]+/${PPAOWNER}/${PPANAME}/:s/^deb/# deb/" $LIST
		msg "$PPAOWNER PPA disabled from $LIST"
	fi
done

apt-get update >/dev/null || warn "Apt-get update failed for some reason. Giving up."

# FIXME:
# Workaround for now incase apt-get fails because of a package not in ubuntu. Aptitude actually works
# but it would be preferred to remove the package from $REINSTALL directly.

if apt-get install ${REINSTALL} ; then
	echo;msg "PPA Purged!"
elif aptitude install ${REINSTALL} ; then
	echo;msg "Package not included in Ubuntu detected, falling back to aptitude to work around it.";echo
else
	warn "Something went wrong. Giving up.";exit 1
fi

exit 0
